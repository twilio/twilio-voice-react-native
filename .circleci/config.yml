version: 2.1

###
# Parameters
###
parameters:
  pr_workflow:
    type: boolean
    default: true # by default pr workflow will get executed.
  release_workflow:
    type: boolean
    default: false
  release_command:
    type: string
    default: "echo \"no release-command specified\""

executors:
  default:
    docker:
      - image: cimg/node:lts
    working_directory: ~/project

commands:
  attach_project:
    steps:
      - attach_workspace:
          at: ~/project
  install-dependencies:
    steps:
      - run:
          name: Install dependencies
          command: |
            yarn run build:constants
            yarn install --cwd example --frozen-lockfile
            yarn install --frozen-lockfile
  setup-detox:
    description: Setup environment for running test on detox
    steps:
      - run: npm install -g react-native-cli
      - run: npm install -g detox-cli && npm link detox
  detox-build:
    description: Builds the app with given Detox configuration, as specified in detoxrc.json file
    parameters:
      configuration:
        description: The Detox configuration to build
        type: string
    steps:
      - run:
          name: Detox Build
          command: |
            cd example 
            detox build -c <<parameters.configuration>>
            cd ..
          no_output_timeout: 20m
  setup-pods:
    description: Setup pods used for ios builds
    steps:
      - restore_cache:
          name: Restoring cocoapods cache
          key: pods-{{ checksum "example/ios/Podfile.lock" }}
      - run:
          name: Install cocoapods if cache does not exist
          command: |
            if [ ! -d "example/ios/Pods" ]; then
              cd example/ios && pod install && cd ../..
            fi
      - save_cache:
          name: Saving cocoapods cache
          key: pods-{{ checksum "example/ios/Podfile.lock" }}
          paths:
            - example/ios/Pods
  simulator-dependencies:
    description: "Install iOS simulator dependencies"
    steps:
      - run:
          name: "Install applesimutils"
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew tap wix/brew
            HOMEBREW_NO_AUTO_UPDATE=1 brew install applesimutils


jobs:
  cache-install-dependencies:
    executor: default
    steps:
      - checkout
      - attach_project
      - restore_cache:
          keys:
            - dependencies-{{ checksum "package.json" }}
            - dependencies-
      - restore_cache:
          keys:
            - dependencies-example-{{ checksum "example/package.json" }}
            - dependencies-example-
      - install-dependencies
      - save_cache:
          key: dependencies-{{ checksum "package.json" }}
          paths: node_modules
      - save_cache:
          key: dependencies-example-{{ checksum "example/package.json" }}
          paths: example/node_modules
      - persist_to_workspace:
          root: .
          paths: .

  lint:
    executor: default
    steps:
      - attach_project
      - run:
          name: Lint files
          command: |
            yarn run check:lint

  typescript:
    executor: default
    steps:
      - attach_project
      - run:
          name: Typecheck files
          command: |
            yarn run check:type

  unit-tests:
    executor: default
    steps:
      - attach_project
      - run:
          name: Run unit tests
          command: |
            yarn run check:test --coverage
      - store_artifacts:
          path: coverage
          destination: coverage

  build-package:
    executor: default
    steps:
      - attach_project
      - run:
          name: Build package
          command: |
            yarn run prepare

  run-release:
    executor:
      name: default
    parameters:
      dry-run:
        type: boolean
        default: true
    steps:
      - checkout
      - install-dependencies
      - when:
          condition: << parameters.dry-run >>
          steps:
            - run: echo "Will run \"<< pipeline.parameters.release_command >>\""
      - unless:
          condition: << parameters.dry-run >>
          steps:
            - run: << pipeline.parameters.release_command >>  

  e2e-ios:
    macos:
      xcode: "13.2.1"
    parameters:
      detox_configuration:
        type: string
    steps:
      - checkout
      - install-dependencies
      - setup-detox
      - run:
          command: |
            cd example
            yarn install
            cd ..
      - simulator-dependencies
      - setup-pods
      # detox build, test, report, artifacts
      # run E2E tests
      - detox-build:
          configuration: <<parameters.detox_configuration>>
      # - detox-test:
      #     configuration: <<parameters.detox_configuration>>
      #     artifacts: <<parameters.artifacts_location>>
      #     test_suite: --cleanup <<parameters.test_suite>>
      # - store_artifacts:
      #     path: ./packages/mobile/test-report.html
      # - store_artifacts:
      #     path: <<parameters.artifacts_location>>

###
# Workflows
###
workflows:
  ###
  # Pull request workflow
  ###
  build-test:
    when:
          and:
            - equal: [true, << pipeline.parameters.pr_workflow >>]
            - equal: [false, << pipeline.parameters.release_workflow >>]
    jobs:
      - cache-install-dependencies
      - lint:
          requires:
            - cache-install-dependencies
      - typescript:
          requires:
            - cache-install-dependencies
      - unit-tests:
          requires:
            - cache-install-dependencies
      - build-package:
          requires:
            - cache-install-dependencies
      - e2e-ios:
          detox_configuration: ios.release
          requires:
            - cache-install-dependencies

  ###
  # Release workflow
  ###
  build-test-release:
    when: << pipeline.parameters.release_workflow >>
    jobs:
      - cache-install-dependencies
      - lint:
          requires:
            - cache-install-dependencies
      - typescript:
          requires:
            - cache-install-dependencies
      - unit-tests:
          requires:
            - cache-install-dependencies
      - build-package:
          requires:
            - cache-install-dependencies
      - run-release:
          name: Release dry run
          dry-run: true
      - hold:
          name: Release approval
          type: approval
      - run-release:
          name: Release
          dry-run: false
          requires:
            - Release approval
